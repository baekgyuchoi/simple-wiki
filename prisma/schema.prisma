generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model TopgMeanings {
  articleId    Int
  meaning      String   @db.Text
  meaningHtml  String   @db.Text
  index        Int
  sectionTitle String
  flagged      Boolean  @default(false)
  createdAt    DateTime @default(now())
  articleTitle String
  page         pages    @relation(fields: [articleId], references: [page_id])

  @@id([articleId, index], name: "meaning_id")
  @@index([articleId], map: "idx_articleId")
  @@index([articleId, index], map: "meaning_id_index")
}

model GenzMeanings {
  articleId    Int
  meaning      String   @db.Text
  meaningHtml  String   @db.Text
  index        Int
  sectionTitle String
  flagged      Boolean  @default(false)
  createdAt    DateTime @default(now())
  articleTitle String
  page         pages    @relation(fields: [articleId], references: [page_id])

  @@id([articleId, index], name: "meaning_id")
  @@index([articleId], map: "idx_articleId")
  @@index([articleId, index], map: "meaning_id_index")
}

model SimpleMeaning {
  articleId    Int
  meaning      String   @db.Text
  meaningHtml  String   @db.Text
  index        Int
  sectionTitle String
  flagged      Boolean  @default(false)
  createdAt    DateTime @default(now())
  articleTitle String
  page         pages    @relation(fields: [articleId], references: [page_id])

  @@id([articleId, index], name: "meaning_id")
  @@index([articleId], map: "idx_articleId")
  @@index([articleId, index], map: "meaning_id_index")
}

model MagaMeanings {
  articleId    Int
  meaning      String   @db.Text
  meaningHtml  String   @db.Text
  index        Int
  sectionTitle String
  flagged      Boolean  @default(false)
  createdAt    DateTime @default(now())
  articleTitle String
  page         pages    @relation(fields: [articleId], references: [page_id])

  @@id([articleId, index], name: "meaning_id")
  @@index([articleId], map: "idx_articleId")
  @@index([articleId, index], map: "meaning_id_index")
}

model HoodMeanings {
  articleId    Int
  meaning      String   @db.Text
  meaningHtml  String   @db.Text
  index        Int
  sectionTitle String
  flagged      Boolean  @default(false)
  createdAt    DateTime @default(now())
  articleTitle String
  page         pages    @relation(fields: [articleId], references: [page_id])

  @@id([articleId, index], name: "meaning_id")
  @@index([articleId], map: "idx_articleId")
  @@index([articleId, index], map: "meaning_id_index")
}

model pages {
  page_id          Int             @id
  page_namespace   Int             @default(0)
  page_title       String          @db.VarChar(255)
  page_is_redirect Int             @default(0) @db.UnsignedTinyInt
  page_content     String          @db.MediumText
  created_at       DateTime        @default(now())
  thumbnail_source String          @db.Text
  thumbnail_height Int
  thumbnail_width  Int
  citations        String          @db.MediumText
  related_pages    related_pages[]
  hood_meanings    HoodMeanings[]
  maga_meanings    MagaMeanings[]
  simple_meanings  SimpleMeaning[]
  topg_meanings    TopgMeanings[]
  genz_meanings    GenzMeanings[]

  @@index([page_id])
}

model related_pages {
  page_id          Int    
  page_title       String @db.VarChar(255)
  page_description String @db.Text
  mother_page_id   Int
  page             pages  @relation(fields: [mother_page_id], references: [page_id])

  @@id ([page_id, mother_page_id], name: "related_page_id")
  @@index([page_id])
  @@index([mother_page_id])
}

model articles {
  page_id            Int     @id @default(autoincrement()) @db.UnsignedInt
  page_namespace     Int     @default(0)
  page_title         Bytes   @db.VarBinary(255)
  page_is_redirect   Int     @default(0) @db.UnsignedTinyInt
  page_is_new        Int     @default(0) @db.UnsignedTinyInt
  page_random        Float   @default(0)
  page_touched       Bytes   @db.Binary(14)
  page_links_updated Bytes?  @db.VarBinary(14)
  page_latest        Int     @default(0) @db.UnsignedInt
  page_len           Int     @default(0) @db.UnsignedInt
  page_content_model Bytes?  @db.VarBinary(32)
  page_lang          Bytes?  @db.VarBinary(35)
  is_valid_type      Boolean @default(true)
  page_title_string  String  @default("") @db.VarChar(255)

  @@unique([page_namespace, page_title], map: "page_name_title")
  @@index([page_namespace], map: "idx_page_namespace")
  @@index([page_len], map: "page_len")
  @@index([page_random], map: "page_random")
  @@index([page_is_redirect, page_namespace, page_len], map: "page_redirect_namespace_len")
}

model pageIDs {
  page_id Int @id
}
